



Network Working Group                                       C. Celi, Ed.
Internet-Draft                                            10 August 2020
Intended status: Informational                                          
Expires: 11 February 2021


          ACVP SSH Key Derivation Function JSON Specification

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 11 February 2021.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Abstract  . . . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   4.  Terms and definitions . . . . . . . . . . . . . . . . . . . .   2
   5.  Supported KDFs  . . . . . . . . . . . . . . . . . . . . . . .   2
   6.  Test Types and Test Coverage  . . . . . . . . . . . . . . . .   3
     6.1.  Test Types  . . . . . . . . . . . . . . . . . . . . . . .   3



Celi                    Expires 11 February 2021                [Page 1]

Internet-Draft                ACVP KDF SSH                   August 2020


     6.2.  Test Coverage . . . . . . . . . . . . . . . . . . . . . .   3
       6.2.1.  SSH Requirements Covered  . . . . . . . . . . . . . .   3
       6.2.2.  SSH Requirements Not Covered  . . . . . . . . . . . .   3
   7.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     7.1.  Prerequisites . . . . . . . . . . . . . . . . . . . . . .   4
     7.2.  Property Registration . . . . . . . . . . . . . . . . . .   5
       7.2.1.  Valid Hash Functions  . . . . . . . . . . . . . . . .   6
   8.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .   6
     8.1.  Test Groups . . . . . . . . . . . . . . . . . . . . . . .   8
     8.2.  Test Cases  . . . . . . . . . . . . . . . . . . . . . . .   8
   9.  Responses . . . . . . . . . . . . . . . . . . . . . . . . . .   9
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  12
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
   12. Bibliography  . . . . . . . . . . . . . . . . . . . . . . . .  12
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Acknowledgements

   There are no acknowledgements.

2.  Abstract

   This document defines the JSON schema for testing SP800-135 SSH KDF
   implementations with the ACVP specification.

3.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing SP800-135
   SSH KDF implementations using ACVP.

4.  Terms and definitions

   No terms and definitions are listed in this document.

5.  Supported KDFs

   The following key derivation functions MAY be advertised by the ACVP
   compliant cryptographic module:



Celi                    Expires 11 February 2021                [Page 2]

Internet-Draft                ACVP KDF SSH                   August 2020


   *  ACVP-KDF-SSH

6.  Test Types and Test Coverage

   This section describes the design of the tests used to validate
   SP800-135 SSH KDF implementations.

6.1.  Test Types

   There is only one test type: functional tests.  Each has a specific
   value to be used in the testType field.  The testType field
   definition is:

   *  "AFT" - Algorithm Functional Test.  These tests can be processed
      by the client using a normal 'derive_key' operation.  AFTs cause
      the implementation under test to exercise normal operations on a
      single block, multiple blocks, or partial blocks.  In all cases,
      random data is used.  The functional tests are designed to verify
      that the logical components of the key deriviation process are
      operating correctly.

6.2.  Test Coverage

   The tests described in this document have the intention of ensuring
   an implementation is conformant to [SP800-135].

6.2.1.  SSH Requirements Covered

   In [SP800-135], TBD.

6.2.2.  SSH Requirements Not Covered

   Some requirements in the outlined specification are not easily
   tested.  Often they are not ideal for black-box testing such as the
   ACVP.  In [SP800-135], TBD.

7.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of SSH KDF algorithms to the
   ACVP server.

   The algorithm capabilities MUST be advertised as JSON objects within
   the 'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an



Celi                    Expires 11 February 2021                [Page 3]

Internet-Draft                ACVP KDF SSH                   August 2020


   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification [ACVP] for more
   details on the registration message.

7.1.  Prerequisites

   Each algorithm implementation MAY rely on other cryptographic
   primitives.  For example, RSA Signature algorithms depend on an
   underlying hash function.  Each of these underlying algorithm
   primitives must be validated, either separately or as part of the
   same submission.  ACVP provides a mechanism for specifying the
   required prerequisites:

   Prerequisites, if applicable, MUST be submitted in the registration
   as the "prereqVals" JSON property array inside each element of the
   "algorithms" array.  Each element in the "prereqVals" array MUST
   contain the following properties

        +===============+=============================+===========+
        | JSON Property | Description                 | JSON Type |
        +===============+=============================+===========+
        | algorithm     | a prerequisite algorithm    | string    |
        +---------------+-----------------------------+-----------+
        | valValue      | algorithm validation number | string    |
        +---------------+-----------------------------+-----------+

                      Table 1: Prerequisite Properties

   A "valValue" of "same" SHALL be used to indicate that the
   prerequisite is being met by a different algorithm in the capability
   exchange in the same registration.

   An example description of prerequisites within a single algorithm
   capability exchange looks like this

   "prereqVals":
   [
     {
       "algorithm": "Alg1",
       "valValue": "Val-1234"
     },
     {
       "algorithm": "Alg2",
       "valValue": "same"
     }
   ]




Celi                    Expires 11 February 2021                [Page 4]

Internet-Draft                ACVP KDF SSH                   August 2020


                                  Figure 1

7.2.  Property Registration

   The SSH KDF mode capabilities are advertised as JSON objects within
   the 'capabilities_exchange' property.

   A registration SHALL use these properties

   +===============+=======================+========+==================+
   | JSON          | Description           | JSON   | Valid Values     |
   | Property      |                       | Type   |                  |
   +===============+=======================+========+==================+
   | algorithm     | Name of the algorithm | string | "kdf-components" |
   |               | to be validated       |        |                  |
   +---------------+-----------------------+--------+------------------+
   | mode          | Mode of the algorithm | string | "ssh"            |
   |               | to be validated       |        |                  |
   +---------------+-----------------------+--------+------------------+
   | revision      | ACVP Test version     | string | "1.0"            |
   +---------------+-----------------------+--------+------------------+
   | cipher        | Block ciphers         | array  | TDES, AES-128,   |
   |               | supported             |        | AES-192, AES-256 |
   +---------------+-----------------------+--------+------------------+
   | hashAlg       | Valid hash algorithms | array  | See              |
   |               | used by the IUT       |        | Section 7.2.1    |
   +---------------+-----------------------+--------+------------------+

               Table 2: SSH KDF Mode Capabilities JSON Values

   An example registration within an algorithm capability exchange looks
   like this.



















Celi                    Expires 11 February 2021                [Page 5]

Internet-Draft                ACVP KDF SSH                   August 2020


   "capability_exchange":
   [
       {
           "algorithm": "kdf-components",
           "mode": "ssh",
           "revision": "1.0",
           "hashAlg": [
               "SHA-1",
               "SHA2-224",
               "SHA2-256",
               "SHA2-384",
               "SHA2-512"
           ],
           "cipher": [
               "TDES",
               "AES-128",
               "AES-192",
               "AES-256"
           ]
       }
   ]

                                  Figure 2

7.2.1.  Valid Hash Functions

   The following hash functions MAY be advertised by an ACVP compliant
   client under the 'hashAlg' property

   *  SHA-1

   *  SHA2-224

   *  SHA2-256

   *  SHA2-384

   *  SHA2-512

8.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation test session would require multiple test
   vector sets to be downloaded and processed by the ACVP client.  Each
   test vector set represents an individual algorithm defined during the
   capability exchange.  This section describes the JSON schema for a
   test vector set used with SP800-135 SSH KDF algorithms.



Celi                    Expires 11 February 2021                [Page 6]

Internet-Draft                ACVP KDF SSH                   August 2020


   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.

    +=============+======================================+===========+
    | JSON Values | Description                          | JSON Type |
    +=============+======================================+===========+
    | acvVersion  | Protocol version identifier          | string    |
    +-------------+--------------------------------------+-----------+
    | vsId        | Unique numeric vector set identifier | integer   |
    +-------------+--------------------------------------+-----------+
    | algorithm   | Algorithm defined in the capability  | string    |
    |             | exchange                             |           |
    +-------------+--------------------------------------+-----------+
    | mode        | Mode defined in the capability       | string    |
    |             | exchange                             |           |
    +-------------+--------------------------------------+-----------+
    | revision    | Protocol test revision selected      | string    |
    +-------------+--------------------------------------+-----------+
    | testGroups  | Array of test groups containing test | array     |
    |             | data, see Section 8.1                |           |
    +-------------+--------------------------------------+-----------+

               Table 3: Top Level Test Vector JSON Elements

   An example of this would look like this

   {
     "acvVersion": "version",
     "vsId": 1,
     "algorithm": "Alg1",
     "mode": "Mode1",
     "revision": "Revision1.0",
     "testGroups": [ ... ]
   }

                                  Figure 3













Celi                    Expires 11 February 2021                [Page 7]

Internet-Draft                ACVP KDF SSH                   August 2020


8.1.  Test Groups

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the SP800-135 SSH KDF JSON elements of the
   Test Group JSON object

       +============+=================================+===========+
       | JSON Value | Description                     | JSON Type |
       +============+=================================+===========+
       | tgId       | Test group identifier           | integer   |
       +------------+---------------------------------+-----------+
       | testType   | Test operations to be performed | string    |
       +------------+---------------------------------+-----------+
       | hashAlg    | The SHA value used              | string    |
       +------------+---------------------------------+-----------+
       | cipher     | The encryption method used      | string    |
       +------------+---------------------------------+-----------+
       | tests      | Array of individual test cases  | array     |
       +------------+---------------------------------+-----------+

                     Table 4: Test Group JSON Object

   The 'tgId', 'testType' and 'tests' objects MUST appear in every test
   group element communicated from the server to the client as a part of
   a prompt.  Other properties are dependent on which 'testType' (see
   Section 6) the group is addressing.

8.2.  Test Cases

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each SP800-135 SSH KDF test vector.













Celi                    Expires 11 February 2021                [Page 8]

Internet-Draft                ACVP KDF SSH                   August 2020


         +============+=============================+===========+
         | JSON Value | Description                 | JSON Type |
         +============+=============================+===========+
         | tcId       | Test case idenfitier        | integer   |
         +------------+-----------------------------+-----------+
         | k          | Shared secret value in      | hex       |
         |            | MPINT format, see [RFC4251] |           |
         +------------+-----------------------------+-----------+
         | h          | Hash value                  | hex       |
         +------------+-----------------------------+-----------+
         | sessionId  | Session ID value            | hex       |
         +------------+-----------------------------+-----------+

                      Table 5: Test Case JSON Object

   Here is an abbreviated yet fully constructed example of the prompt.

   {
       "vsId": 1,
       "algorithm": "kdf-components",
       "mode": "ssh",
       "revision": "1.0",
       "testGroups": [
           {
               "tgId": 1,
               "cipher": "TDES",
               "hashAlg": "SHA-1",
               "tests": [
                   {
                       "tcId": 1,
                       "k": "00000100074F0CA30BDF...",
                       "h": "44A4FFE335663340FE1E...",
                       "sessionId": "76B601459363..."
                   }
               ]
           }
       ]
   }

                                  Figure 4

9.  Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.




Celi                    Expires 11 February 2021                [Page 9]

Internet-Draft                ACVP KDF SSH                   August 2020


        +===============+=============================+===========+
        | JSON Property | Description                 | JSON Type |
        +===============+=============================+===========+
        | acvVersion    | The version of the protocol | string    |
        +---------------+-----------------------------+-----------+
        | vsId          | The vector set identifier   | integer   |
        +---------------+-----------------------------+-----------+
        | testGroups    | The test group data         | array     |
        +---------------+-----------------------------+-----------+

                  Table 6: Vector Set Response JSON Object

   An example of this is the following.

   {
       "acvVersion": "version",
       "vsId": 1,
       "testGroups": [ ... ]
   }

                                  Figure 5

   The testGroups section is used to organize the ACVP client response
   in a similar manner to how it receives vectors.  Several algorithms
   SHALL require the client to send back group level properties in their
   response.  This structure helps accommodate that.

         +===============+===========================+===========+
         | JSON Property | Description               | JSON Type |
         +===============+===========================+===========+
         | tgId          | The test group identifier | integer   |
         +---------------+---------------------------+-----------+
         | tests         | The test case data        | array     |
         +---------------+---------------------------+-----------+

               Table 7: Vector Set Group Response JSON Object

   An example of this is the following.

   {
       "tgId": 1,
       "tests": [ ... ]
   }

                                  Figure 6

   The following table describes the JSON object that represents a test
   case response for a SP800-135 SSH KDF.



Celi                    Expires 11 February 2021               [Page 10]

Internet-Draft                ACVP KDF SSH                   August 2020


   +=====================+=================================+===========+
   | JSON Property       | Description                     | JSON Type |
   +=====================+=================================+===========+
   | tcId                | The test case identifier        | integer   |
   +---------------------+---------------------------------+-----------+
   | initialIvClient     | Client to server initial IV     | hex       |
   +---------------------+---------------------------------+-----------+
   | initialIvServer     | Server to client initial IV     | hex       |
   +---------------------+---------------------------------+-----------+
   | encryptionKeyClient | Client to server encryption     | hex       |
   |                     | key                             |           |
   +---------------------+---------------------------------+-----------+
   | encryptionKeyServer | Server to client                | hex       |
   |                     | eencryption key                 |           |
   +---------------------+---------------------------------+-----------+
   | integrityKeyClient  | Client to server integrity      | hex       |
   |                     | key                             |           |
   +---------------------+---------------------------------+-----------+
   | integrityKeyServer  | Server to client integrity      | hex       |
   |                     | key                             |           |
   +---------------------+---------------------------------+-----------+

                   Table 8: Test Case Results JSON Object

   Here is an abbreviated example of the response.

   {
     "vsId": 1,
     "testResults": [
       {
         "tgId": 1,
         "tests": [
           {
             "tcId": 1,
             "initialIvClient": "D58275F599E68471",
             "encryptionKeyClient": "D1B16D92ED9AB...",
             "integrityKeyClient": "E7F57D7BFFFB58...",
             "initialIvServer": "3F48A283BF85F147",
             "encryptionKeyServer": "289241764AB45...",
             "integrityKeyServer": "9EE185ACDFE192..."
           }
         ]
       }
     ]
   }

                                  Figure 7




Celi                    Expires 11 February 2021               [Page 11]

Internet-Draft                ACVP KDF SSH                   August 2020


10.  Security Considerations

   There are no additional security considerations outside of those
   outlined in the ACVP document.

11.  IANA Considerations

   This document does not require any action by IANA.

12.  Bibliography

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", IETF RFC 2119, IETF RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC4251]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Protocol Architecture", IETF RFC 4251, IETF RFC 4251,
              DOI 10.17487/RFC4251, January 2006,
              <https://www.rfc-editor.org/info/rfc4251>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", IETF RFC 8174, IETF RFC 8174,
              DOI 10.17487/RFC8174, May 2017,
              <https://www.rfc-editor.org/info/rfc8174>.

   [ACVP]     Fussell, B., Vassilev, A., and H. Booth, "Automatic
              Cryptographic Validation Protocol", ACVP ACVP, 2019.

   [SP800-135]
              Dang, Q., "SP800-135r1 Recommendation for Existing
              Application-Specific Key Derivation Functions", SP800
              SP800-135, 2011,
              <https://nvlpubs.nist.gov/nistpubs/Legacy/SP/
              nistspecialpublication800-135r1.pdf>.

Author's Address

   Christopher Celi (editor)

   Email: christopher.celi@nist.gov










Celi                    Expires 11 February 2021               [Page 12]
