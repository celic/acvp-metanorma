



Network Working Group                                       C. Celi, Ed.
Internet-Draft                                            10 August 2020
Intended status: Informational                                          
Expires: 11 February 2021


          ACVP SNMP Key Derivation Function JSON Specification
                      draft-celi-acvp-kdf-snmp-01

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 11 February 2021.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Abstract  . . . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   4.  Terms and definitions . . . . . . . . . . . . . . . . . . . .   2
   5.  Supported KDFs  . . . . . . . . . . . . . . . . . . . . . . .   2
   6.  Test Types and Test Coverage  . . . . . . . . . . . . . . . .   3
     6.1.  Test Types  . . . . . . . . . . . . . . . . . . . . . . .   3
       6.1.1.  SNMP Requirements Covered . . . . . . . . . . . . . .   3
       6.1.2.  SNMP Requirements Not Covered . . . . . . . . . . . .   3



Celi                    Expires 11 February 2021                [Page 1]

Internet-Draft                ACVP KDF SNMP                  August 2020


   7.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     7.1.  Prerequisites . . . . . . . . . . . . . . . . . . . . . .   4
     7.2.  Property Registration . . . . . . . . . . . . . . . . . .   5
     7.3.  Registration Example  . . . . . . . . . . . . . . . . . .   5
   8.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .   6
     8.1.  Test Groups . . . . . . . . . . . . . . . . . . . . . . .   7
     8.2.  Test Cases  . . . . . . . . . . . . . . . . . . . . . . .   8
     8.3.  Test Vector Responses . . . . . . . . . . . . . . . . . .   9
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11
   11. Normative references  . . . . . . . . . . . . . . . . . . . .  11
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Acknowledgements

   There are no acknowledgements.

2.  Abstract

   This document defines the JSON schema for testing SP800-135 SNMP KDF
   implementations with the ACVP specification.

3.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing SP800-135
   SNMP KDF implementations using ACVP.

4.  Terms and definitions

   No terms and definitions are listed in this document.

5.  Supported KDFs

   The following key derivation functions MAY be advertised by the ACVP
   compliant cryptographic module:

   *  ACVP-KDF-SNMP




Celi                    Expires 11 February 2021                [Page 2]

Internet-Draft                ACVP KDF SNMP                  August 2020


6.  Test Types and Test Coverage

   This section describes the design of the tests used to validate
   SP800-135 SNMP KDF implementations.

6.1.  Test Types

   There is only one test type: functional tests.  Each has a specific
   value to be used in the testType field.  The testType field
   definition is:

   *  "AFT" - Algorithm Functional Test.  These tests can be processed
      by the client using a normal 'derive_key' operation.  AFTs cause
      the implementation under test to exercise normal operations on
      random data.  The functional tests are designed to verify that the
      logical components of the key deriviation process are operating
      correctly. === Test Coverage

   The tests described in this document have the intention of ensuring
   an implementation is conformant to XXX.

6.1.1.  SNMP Requirements Covered

6.1.2.  SNMP Requirements Not Covered

7.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of SNMP algorithms to the ACVP
   server.

   The algorithm capabilities MUST be advertised as JSON objects within
   the 'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification [ACVP] for more
   details on the registration message.










Celi                    Expires 11 February 2021                [Page 3]

Internet-Draft                ACVP KDF SNMP                  August 2020


7.1.  Prerequisites

   Each algorithm implementation MAY rely on other cryptographic
   primitives.  For example, RSA Signature algorithms depend on an
   underlying hash function.  Each of these underlying algorithm
   primitives must be validated, either separately or as part of the
   same submission.  ACVP provides a mechanism for specifying the
   required prerequisites:

   Prerequisites, if applicable, MUST be submitted in the registration
   as the "prereqVals" JSON property array inside each element of the
   "algorithms" array.  Each element in the "prereqVals" array MUST
   contain the following properties

        +===============+=============================+===========+
        | JSON Property | Description                 | JSON Type |
        +===============+=============================+===========+
        | algorithm     | a prerequisite algorithm    | string    |
        +---------------+-----------------------------+-----------+
        | valValue      | algorithm validation number | string    |
        +---------------+-----------------------------+-----------+

                      Table 1: Prerequisite Properties

   A "valValue" of "same" SHALL be used to indicate that the
   prerequisite is being met by a different algorithm in the capability
   exchange in the same registration.

   An example description of prerequisites within a single algorithm
   capability exchange looks like this

   "prereqVals":
   [
     {
       "algorithm": "Alg1",
       "valValue": "Val-1234"
     },
     {
       "algorithm": "Alg2",
       "valValue": "same"
     }
   ]

                                  Figure 1







Celi                    Expires 11 February 2021                [Page 4]

Internet-Draft                ACVP KDF SNMP                  August 2020


7.2.  Property Registration

   The SNMP KDF mode capabilities are advertised as JSON objects within
   the 'capabilities_exchange' property.

7.3.  Registration Example

   A registration SHALL use these properties

   +================+====================+========+===================+
   | JSON Property  | Description        | JSON   | Valid Values      |
   |                |                    | Type   |                   |
   +================+====================+========+===================+
   | algorithm      | Name of the        | string | "kdf-components"  |
   |                | algorithm to be    |        |                   |
   |                | validated          |        |                   |
   +----------------+--------------------+--------+-------------------+
   | mode           | Mode of the        | string | "snmp"            |
   |                | algorithm to be    |        |                   |
   |                | validated          |        |                   |
   +----------------+--------------------+--------+-------------------+
   | revision       | ACVP Test version  | string | "1.0"             |
   +----------------+--------------------+--------+-------------------+
   | engineId       | Two distinct       | array  | hex between 9 and |
   |                | engine IDs in      |        | 32 bytes (18-64   |
   |                | hexadecimal        |        | characters)       |
   +----------------+--------------------+--------+-------------------+
   | passwordLength | Password lengths   | domain | Min: 64, Max:     |
   |                | in bits, supported |        | 8192              |
   |                | by the IUT         |        |                   |
   +----------------+--------------------+--------+-------------------+

             Table 2: SNMP KDF Mode Capabilities JSON Values

   An example registration within an algorithm capability exchange looks
   like this















Celi                    Expires 11 February 2021                [Page 5]

Internet-Draft                ACVP KDF SNMP                  August 2020


   {
       "algorithm": "kdf-components",
       "mode": "snmp",
       "revision" "1.0",
       "engineId": [
           "12345678912345678900",
           "abcdef0123456789abcdef1234567890"
       ],
       "passwordLength": [
           64,
           8192
       ]
   }

                                  Figure 2

8.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation test session would require multiple test
   vector sets to be downloaded and processed by the ACVP client.  Each
   test vector set represents an individual algorithm defined during the
   capability exchange.  This section describes the JSON schema for a
   test vector set used with SP800-135 SNMP KDF algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.





















Celi                    Expires 11 February 2021                [Page 6]

Internet-Draft                ACVP KDF SNMP                  August 2020


    +=============+======================================+===========+
    | JSON Values | Description                          | JSON Type |
    +=============+======================================+===========+
    | acvVersion  | Protocol version identifier          | string    |
    +-------------+--------------------------------------+-----------+
    | vsId        | Unique numeric vector set identifier | integer   |
    +-------------+--------------------------------------+-----------+
    | algorithm   | Algorithm defined in the capability  | string    |
    |             | exchange                             |           |
    +-------------+--------------------------------------+-----------+
    | mode        | Mode defined in the capability       | string    |
    |             | exchange                             |           |
    +-------------+--------------------------------------+-----------+
    | revision    | Protocol test revision selected      | string    |
    +-------------+--------------------------------------+-----------+
    | testGroups  | Array of test groups containing test | array     |
    |             | data, see Section 8.1                |           |
    +-------------+--------------------------------------+-----------+

               Table 3: Top Level Test Vector JSON Elements

   An example of this would look like this

   {
     "acvVersion": "version",
     "vsId": 1,
     "algorithm": "Alg1",
     "mode": "Mode1",
     "revision": "Revision1.0",
     "testGroups": [ ... ]
   }

                                  Figure 3

8.1.  Test Groups

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the SP800-135 SNMP KDF JSON elements of the
   Test Group JSON object







Celi                    Expires 11 February 2021                [Page 7]

Internet-Draft                ACVP KDF SNMP                  August 2020


     +================+=================================+===========+
     | JSON Value     | Description                     | JSON Type |
     +================+=================================+===========+
     | tgId           | Test group identifier           | integer   |
     +----------------+---------------------------------+-----------+
     | testType       | Test operations to be performed | string    |
     +----------------+---------------------------------+-----------+
     | engineId       | Engine ID as hexadecimal string | hex       |
     +----------------+---------------------------------+-----------+
     | passwordLength | Length of password              | integer   |
     +----------------+---------------------------------+-----------+
     | tests          | Array of individual test cases  | array     |
     +----------------+---------------------------------+-----------+

                     Table 4: Test Group JSON Object

   The 'tgId', 'testType' and 'tests' objects MUST appear in every test
   group element communicated from the server to the client as a part of
   a prompt.  Other properties are dependent on which 'testType' (see
   Section 6) the group is addressing.

8.2.  Test Cases

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each SP800-135 SNMP KDF test vector.

   +============+======================+==============================+
   | JSON Value | Description          | JSON Type                    |
   +============+======================+==============================+
   | tcId       | Test case idenfitier | integer                      |
   +------------+----------------------+------------------------------+
   | password   | Password value       | string (ascii value, A-Za-z) |
   +------------+----------------------+------------------------------+

                      Table 5: Test Case JSON Object

   Here is an abbreviated yet fully constructed example of the prompt.












Celi                    Expires 11 February 2021                [Page 8]

Internet-Draft                ACVP KDF SNMP                  August 2020


   {
       "vsId": 1,
       "algorithm": "kdf-components",
       "mode": "snmp",
       "revision": "1.0",
       "testGroups": [
           {
               "tgId": 1,
               "engineId": "12345678912345678900",
               "passwordLength": 64,
               "testType": "AFT",
               "tests": [
                   {
                       "tcId": 1,
                       "password": "HkrWlnWjflyJTgvYFhvCQp..."
                   }
               ]
           }
       ]
   }

                                  Figure 4

8.3.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

        +===============+=============================+===========+
        | JSON Property | Description                 | JSON Type |
        +===============+=============================+===========+
        | acvVersion    | The version of the protocol | string    |
        +---------------+-----------------------------+-----------+
        | vsId          | The vector set identifier   | integer   |
        +---------------+-----------------------------+-----------+
        | testGroups    | The test group data         | array     |
        +---------------+-----------------------------+-----------+

                  Table 6: Vector Set Response JSON Object

   An example of this is the following








Celi                    Expires 11 February 2021                [Page 9]

Internet-Draft                ACVP KDF SNMP                  August 2020


   {
       "acvVersion": "version",
       "vsId": 1,
       "testGroups": [ ... ]
   }

                                  Figure 5

   The testGroups section is used to organize the ACVP client response
   in a similar manner to how it receives vectors.  Several algorithms
   SHALL require the client to send back group level properties in their
   response.  This structure helps accommodate that.

         +===============+===========================+===========+
         | JSON Property | Description               | JSON Type |
         +===============+===========================+===========+
         | tgId          | The test group identifier | integer   |
         +---------------+---------------------------+-----------+
         | tests         | The test case data        | array     |
         +---------------+---------------------------+-----------+

               Table 7: Vector Set Group Response JSON Object

   An example of this is the following

   {
       "tgId": 1,
       "tests": [ ... ]
   }

                                  Figure 6

   The following table describes the JSON object that represents a test
   case response for a SP800-135 SNMP KDF.

       +===============+===============================+===========+
       | JSON Property | Description                   | JSON Type |
       +===============+===============================+===========+
       | tcId          | The test case identifier      | integer   |
       +---------------+-------------------------------+-----------+
       | sharedKey     | The computed shared key value | hex       |
       +---------------+-------------------------------+-----------+

                   Table 8: Test Case Results JSON Object

   Here is an abbreviated example of the response





Celi                    Expires 11 February 2021               [Page 10]

Internet-Draft                ACVP KDF SNMP                  August 2020


   {
       "vsId": 1,
       "testGroups": [
           {
               "tgId": 1,
               "tests": [
                   {
                       "tcId": 1,
                       "sharedKey": "DC7756170981..."
                   }
               ]
           }
       ]
   }

                                  Figure 7

9.  Security Considerations

   There are no additional security considerations outside of those
   outlined in the ACVP document.

10.  IANA Considerations

   This document does not require any action by IANA.

11.  Normative references

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", IETF RFC 2119, IETF RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC7991]  Hoffman, P., "The "xml2rfc" Version 3 Vocabulary", IETF
              RFC 7991, IETF RFC 7991, DOI 10.17487/RFC7991, December
              2016, <https://www.rfc-editor.org/info/rfc7991>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", IETF RFC 8174, IETF RFC 8174,
              DOI 10.17487/RFC8174, May 2017,
              <https://www.rfc-editor.org/info/rfc8174>.

   [ACVP]     National Institute of Standards and Technology, "Automatic
              Cryptographic Validation Protocol", ACVP ACVP, 2019.

Author's Address





Celi                    Expires 11 February 2021               [Page 11]

Internet-Draft                ACVP KDF SNMP                  August 2020


   Christopher Celi (editor)

   Email: christopher.celi@nist.gov
















































Celi                    Expires 11 February 2021               [Page 12]
